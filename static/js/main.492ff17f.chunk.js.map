{"version":3,"sources":["components/game.js","App.js","serviceWorker.js","index.js"],"names":["ConwaysGameEngine","require","neighborLocations","Game","speed","rows","cols","running","useState","grid","setGrid","engine","setEngine","runningRef","useRef","current","speedRef","useEffect","rowSize","colSize","world","runSimulation","useCallback","produce","gridCopy","i","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","style","display","gridTemplateColumns","map","col","key","onClick","newGrid","console","log","width","height","backgroundColor","undefined","border","speedOptions","text","value","App","setRows","setCols","setSpeed","setRunning","placeholder","onChange","e","target","opt","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.492ff17f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport produce from 'immer';\nconst { ConwaysGameEngine } = require('@monarchwadia/conways-game-engine');\n\nconst neighborLocations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nconst Game = ({ speed, rows, cols, running }) => {\n\n\n  const [grid, setGrid] = useState();\n  const [engine, setEngine] = useState();\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const speedRef = useRef(speed);\n  speedRef.current = speed;\n\n  useEffect(() => {\n    const engine = new ConwaysGameEngine({\n      rowSize: rows,\n      colSize: cols\n    });\n\n    setEngine(engine);\n    setGrid(engine.world);\n\n  }, [rows, cols]);\n  \n  useEffect(() => {\n    if (running) {\n      runSimulation();\n    }\n    // eslint-disable-next-line\n  }, [running]);\n\n  const runSimulation = useCallback(\n    () => {\n      if (!runningRef.current) {\n        return;\n      }\n      setGrid(grid => {\n        return produce(grid, gridCopy => {\n          for (let i = 0; i < rows; i++) {\n            for (let k = 0; k < cols; k++) {\n              let neighbors = 0;\n              neighborLocations.forEach(([x, y]) => {\n                const newI = i + x;\n                const newK = k + y;\n                if (newI >= 0 && newI < rows && newK >= 0 && newK < cols) {\n                  neighbors += grid[newI][newK];\n                }\n              });\n  \n              if (neighbors < 2 || neighbors > 3) {\n                gridCopy[i][k] = 0;\n              } else if (grid[i][k] === 0 && neighbors === 3) {\n                gridCopy[i][k] = 1;\n              }\n            }\n          }\n        });\n      });\n  \n      setTimeout(runSimulation, speedRef.current);\n    },\n    // eslint-disable-next-line\n    [grid, speed],\n  )\n\n  return (\n    <div className='game'>\n      {!grid && <h3>Select grid size</h3>}\n      {grid &&\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${cols}, 20px)`\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                key={`${i}-${k}`}\n                onClick={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n                setTimeout(() => {\n                  setEngine({ ...engine, world: newGrid });\n                  console.log(engine);\n\n                }, 500)\n                }}\n                style={{\n                  width: 20,\n                  height: 20,\n                  backgroundColor: grid[i][k] ? \"#61dafb\" : undefined,\n                  border: \"solid 1px #61dafb\"\n                }}\n              />\n            )))}\n        </div>}\n    </div>\n  )\n      }\n      \n      export default Game\n","import React, { useState } from 'react';\nimport './App.css';\nimport Game from './components/game';\n\nconst speedOptions = [\n  { key: 'slowest', text: 'slowest', value: 2500 },\n  { key: 'slower', text: 'slower', value: 1800 },\n  { key: 'normal', text: 'normal', value: 1000 },\n  { key: 'faster', text: 'faster', value: 500 },\n  { key: 'fastest', text: 'fastest', value: 100 },\n];\n\nfunction App() {\n\n  const [rows, setRows] = useState();\n  const [cols, setCols] = useState();\n  const [speed, setSpeed] = useState(1000);\n  const [running, setRunning] = useState(false)\n\n  return (\n    <div className=\"App\">\n      <header className='header'>\n        <h1>Welcome to Conways game of life (Easy version)</h1>\n      </header>\n      <div className='container'>\n        <section className='section-controls'>\n          <h2>Game Controls</h2>\n          <label>\n            Rows:\n          </label>\n          <input\n            value={rows}\n            placeholder={\"default value is 10\"}\n            onChange={e => setRows(e.target.value)}\n          />\n          <label>\n            Columns:\n          </label>\n          <input\n            value={cols}\n            placeholder={\"default value is 10\"}\n            onChange={e => setCols(e.target.value)}\n          />\n          <label>\n            Speed:\n          </label>\n          <select onChange={e => setSpeed(e.target.value)}>\n            {speedOptions.map(opt => (\n              <option value={opt.value} selected={opt.value === 1000 ? true : false} key={opt.key}>{opt.text}</option>\n            ))}\n          </select>\n          <label>Play/Pause: </label>\n          <button onClick={() => setRunning(!running)}>{running ? 'stop' : 'play'}</button>\n        </section>\n        <Game rows={rows || 10} cols={cols || 10} speed={speed} running={running} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}