{"version":3,"sources":["components/game.js","App.js","serviceWorker.js","index.js"],"names":["require","ConwaysGameEngine","Game","defaultRules","speed","rows","cols","useState","grid","setGrid","engine","setEngine","useEffect","rowSize","colSize","world","className","style","display","gridTemplateColumns","map","i","col","k","key","onClick","draw","console","log","width","height","backgroundColor","undefined","border","App","setRows","setCols","setSpeed","value","placeholder","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gUAC4CA,EAAQ,KAA5CC,E,EAAAA,kBAqDaC,G,EArDMC,aAId,SAAC,GAA0B,EAAxBC,MAAyB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAAW,EAGdC,qBAHc,mBAG/BC,EAH+B,KAGzBC,EAHyB,OAIVF,qBAJU,mBAI/BG,EAJ+B,KAIvBC,EAJuB,KAiBtC,OAXAC,qBAAU,WACR,IAAMF,EAAS,IAAIT,EAAkB,CACnCY,QAASR,GAAQ,GACjBS,QAASR,GAAQ,KAGnBK,EAAUD,GACVD,EAAQC,EAAOK,SAEd,CAACV,EAAMC,IAGR,yBAAKU,UAAU,SACXR,GAAQ,gDACTA,GACC,yBACES,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAAYb,GAAQ,GAApB,aAGpBE,EAAKY,KAAI,SAACf,EAAMgB,GAAP,OACRhB,EAAKe,KAAI,SAACE,EAAKC,GAAN,OACP,yBACEC,IAAG,UAAKH,EAAL,YAAUE,GACbE,QAAS,WACPf,EAAOgB,KAAKL,EAAGE,GACfI,QAAQC,IAAIlB,EAAOK,OACnBN,EAAQC,EAAOK,QAEjBE,MAAO,CACLY,MAAO,GACPC,OAAQ,GACRC,gBAAiBvB,EAAKa,GAAGE,GAAK,eAAYS,EAC1CC,OAAQ,iCCIXC,MA7Cf,WAAgB,IAAD,EAEW3B,qBAFX,mBAENF,EAFM,KAEA8B,EAFA,OAGW5B,qBAHX,mBAGND,EAHM,KAGA8B,EAHA,OAIa7B,mBAAS,KAJtB,mBAINH,EAJM,KAICiC,EAJD,KAMb,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,UAChB,+EAEF,yBAAKA,UAAU,aACb,6BAASA,UAAU,oBACjB,iDACA,wCAGA,2BACEsB,MAAOjC,EACPkC,YAAa,sBACbC,SAAU,SAAAC,GAAC,OAAIN,EAAQM,EAAEC,OAAOJ,UAElC,2CAGA,2BACEA,MAAOhC,EACPiC,YAAa,sBACbC,SAAU,SAAAC,GAAC,OAAIL,EAAQK,EAAEC,OAAOJ,UAElC,yCAGA,4BAAQb,QAAS,kBAAoBY,EAAdjC,EAAQ,IAAe,IAAgBA,EAAQ,OAAtE,YACA,4BAAQqB,QAAS,kBAAqBY,EAAfjC,EAAQ,KAAgB,KAAiBA,EAAQ,OAAxE,cAEF,6BAASY,UAAU,iBAGnB,kBAAC,EAAD,CAAMX,KAAMA,EAAMC,KAAMA,EAAMF,MAAOA,OC/BzBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.be25d0ba.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nconst { ConwaysGameEngine, defaultRules } = require('@monarchwadia/conways-game-engine');\n\n\n\nconst Game = ({ speed, rows, cols }) => {\n\n\n  const [grid, setGrid] = useState();\n  const [engine, setEngine] = useState();\n\n  useEffect(() => {\n    const engine = new ConwaysGameEngine({\n      rowSize: rows || 10,\n      colSize: cols || 10\n    });\n\n    setEngine(engine);\n    setGrid(engine.world);\n\n  }, [rows, cols]);\n\n  return (\n    <div className='game'>\n      {!grid && <h3>Select grid size</h3>}\n      {grid &&\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${cols || 10}, 20px)`\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                key={`${i}-${k}`}\n                onClick={() => {\n                  engine.draw(i, k);\n                  console.log(engine.world);\n                  setGrid(engine.world);\n                }}\n                style={{\n                  width: 20,\n                  height: 20,\n                  backgroundColor: grid[i][k] ? \"#61dafb\" : undefined,\n                  border: \"solid 1px #61dafb\"\n                }}\n              />\n            )))}\n        </div>}\n    </div>\n  )\n      }\n      \n      export default Game\n","import React, { useState } from 'react';\nimport './App.css';\nimport Game from './components/game';\n\nfunction App() {\n\n  const [rows, setRows] = useState();\n  const [cols, setCols] = useState();\n  const [speed, setSpeed] = useState(1000);\n\n  return (\n    <div className=\"App\">\n      <header className='header'>\n        <h1>Welcome to Conways game of life (Easy version)</h1>\n      </header>\n      <div className='container'>\n        <section className='section-controls'>\n          <h2>Format board size</h2>\n          <label>\n            Rows:\n          </label>\n          <input\n            value={rows}\n            placeholder={\"default value is 10\"}\n            onChange={e => setRows(e.target.value)}\n          />\n          <label>\n            Columns:\n          </label>\n          <input\n            value={cols}\n            placeholder={\"default value is 10\"}\n            onChange={e => setCols(e.target.value)}\n          />\n          <label>\n            Speed:\n          </label>\n          <button onClick={() => speed < 101 ? setSpeed(100) : setSpeed(speed - 100)}>speed up</button>\n          <button onClick={() => speed > 2500 ? setSpeed(2500) : setSpeed(speed + 100)}>slow down</button>\n        </section>\n        <section className='section-game'>\n\n        </section>\n        <Game rows={rows} cols={cols} speed={speed}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}